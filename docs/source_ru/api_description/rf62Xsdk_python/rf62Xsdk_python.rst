.. _rf62x_wrappers_description:

.. |pydll| replace:: rf62Xsdk.dll
.. |PYSDK| replace:: PYSDK.py
.. |PYSDK_functions| replace:: PYSDK_functions.py
.. |PYCLASS| replace:: rf627old

*******************************************************************************
API «обёртки» на Python
*******************************************************************************

Библиотеки-«обёртки» помогают создавать программы для работы со сканерами серии 
RF62X на разных языках для различных платформ, тем самым упрощая использование 
RF62X CORE (rf62Xcore библиотеки).

.. _rf62x_wrappers_description_python:

Библиотека-«обёртка» на Python
===============================================================================

Эта библиотека позволяет упростить разработку приложений на языке Python

Для её использования в проектах Python разработчик должен включить необходимые 
py-файлы библиотеки в свой проект, а также динамическую программную библиотеку |pydll|. 
Взаимодействие с динамической библиотекой происходит за счет встроенного в Python модуля 
ctypes. Модуль позволяет вызывать функции динамической программной библиотеки |pydll|,  
пользуясь при этом структурами данных языка C (см. ``rf62X_types.h``) непосредственно в Python. 


| Для скачивания библиотеки |pydll| см. :ref:`последние выпуски «обёртки» на C <rf62x_sdk_c_last_release>`. 

.. _rf62x_wrappers_description_python_api:

Обзор программного интерфейса 
-------------------------------------------------------------------------------


|PYSDK|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Файл |PYSDK| является основным файлом программного интерфейса (API) для 
разработки программ на языке Python и определяет функциональность библиотеки-«обёртки» 
для rf62Xcore. 
|PYSDK| содержит следующий набор классов и функций для разработки:

.. doxygenfile:: rf62Xwrappers/Python/|PYSDK|

|PYSDK_functions|
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Файл |PYSDK_functions| содержит необходимый набор типов, структур и констант (см. ``rf62X_types.h``) для работы 
с |pydll|, а также интерфейс вызываемых из библиотеки функций (см. ``rf62Xsdk.h``).   

.. doxygenfile:: rf62Xwrappers/Python/|PYSDK_functions|


Как скомпилировать
-------------------------------------------------------------------------------

Динамическая программная библиотека |pydll|, необходимая для работы «обёртка» на Python, 
может быть скомпилирован при помощи консоли или среды разработки (Visual Studio, Qt Creator).

Во-первых, вы должны загрузить проект (если не сделали этого ранее)


.. note::
   для получения дополнительной информации о шагах загрузки проекта см. :ref:`clone_rf62x_sdk`

.. _how_to_compile_rf62x_sdk_c_cmake:

CMake
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Находясь в папке с проектом, для построения 
динамической программной библиотеки |pydll|, необходимой для работы «обёртка» на Python, 
введите следующую команду в консоль (терминал):


.. code-block:: bash

   cd rf62Xwrappers/C/rf62Xsdk
   mkdir build
   cd build
   cmake ..
   cmake --build .

.. _how_to_compile_rf62x_sdk_cpp_qt_creator:

Qt Creator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Для построения библиотеки-«обёртки» (rf62Xsdk библиотеки) с использованием IDE Qt Creator: 

-  Загрузите файл CMakeLists.txt из папки **rf62Xwrappers/С/rf62Xsdk** через 
   **File > Open File or Project** (выберите файл CMakeLists.txt)
-  Выберите компилятор (MinGW, MSVC2017, Clang)
   и нажмите **Configure Project** 
-  Откройте **Build Settings** и отметьте пункт **install** для **Build Steps**
-  Скомпилируйте проект

.. _how_to_compile_rf62x_sdk_c_vs:

Visual Studio
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Находясь в папке с проектом, для построения RF62X CORE (rf62Xcore библиотеки) 
введите следующую команду в консоль (терминал):

.. code-block:: bash

   cd rf62Xwrappers/С/rf62Xsdk
   mkdir build
   cd build
   cmake ..

-  Откройте полученное решение rf62Xsdk.sln в Visual Studio
-  Скомпилируйте проект

